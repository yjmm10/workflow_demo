name: OpenCVBuilder

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:
  ubuntu1804:
    runs-on: ubuntu-18.04

    env:
      OPENCV_VERSION: 4.6.0
      PKG_NAME: opencv-4.6.0-ubuntu1804

    steps:
      # 检出代码
      - uses: actions/checkout@v2

      # 检出opencv
      - name: checkout opencv
        uses: actions/checkout@v2
        with:
          repository: opencv/opencv
          path: opencv-${{ env.OPENCV_VERSION }}
          ref: ${{ env.OPENCV_VERSION }}
          submodules: recursive

      # 复制编译脚本
      - name: copy build script
        run: |
          cp build-opencv4.sh opencv-${{ env.OPENCV_VERSION }}
          cp opencv4_cmake_options.txt opencv-${{ env.OPENCV_VERSION }}

      # 编译opencv4 for ubuntu
      - name: build opencv
        run: |
          cd opencv-${{ env.OPENCV_VERSION }}
          chmod a+x build-opencv4.sh &&./build-opencv4.sh

      # install文件夹改名linux，并使用7z压缩
      - name: 7zip
        run: |
          mv opencv-${{ env.OPENCV_VERSION }}/build-Release/install linux
          7z a ${{ env.PKG_NAME }}.7z linux

      # 上传artifact
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}
          path: ${{ env.PKG_NAME }}.7z

  macos1015:
    runs-on: macos-latest

    env:
      OPENCV_VERSION: 4.6.0
      PKG_NAME: opencv-4.6.0-macos1015

    steps:
      # 检出代码
      - uses: actions/checkout@v2

      # 检出opencv
      - name: checkout opencv
        uses: actions/checkout@v2
        with:
          repository: opencv/opencv
          path: opencv-${{ env.OPENCV_VERSION }}
          ref: ${{ env.OPENCV_VERSION }}
          submodules: recursive

      # 安装openmp
      - name: install openmp
        run: |
          brew install libomp

      # 复制编译脚本
      - name: copy build script
        run: |
          cp build-opencv4.sh opencv-${{ env.OPENCV_VERSION }}
          cp opencv4_cmake_options.txt opencv-${{ env.OPENCV_VERSION }}

      # 编译opencv for macos
      - name: build opencv
        run: |
          cd opencv-${{ env.OPENCV_VERSION }}
          chmod a+x build-opencv4.sh &&./build-opencv4.sh

      # install文件夹改名macos，并使用7z压缩
      - name: rename
        run: |
          mv opencv-${{ env.OPENCV_VERSION }}/build-Release/install macos
          7z a ${{ env.PKG_NAME }}.7z macos

      # 上传artifact
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}
          path: ${{ env.PKG_NAME }}.7z

  windows-vs2017:
    runs-on: windows-2016

    env:
      OPENCV_VERSION: 4.6.0
      PKG_NAME: opencv-4.6.0-windows-vs2017

    steps:
      # 检出代码
      - uses: actions/checkout@v2

      # 检出opencv
      - name: checkout opencv
        uses: actions/checkout@v2
        with:
          repository: opencv/opencv
          path: opencv-${{ env.OPENCV_VERSION }}
          ref: ${{ env.OPENCV_VERSION }}
          submodules: recursive

      # 复制编译脚本
      - name: copy build script
        run: |
          cp build-opencv4-vs2017.bat opencv-${{ env.OPENCV_VERSION }}
          cp opencv4_cmake_options.txt opencv-${{ env.OPENCV_VERSION }}

      # 编译opencv for windows
      # https://github.com/ilammy/msvc-dev-cmd
      #- uses: ilammy/msvc-dev-cmd@v1
      - name: build opencv
        run: |
          cd opencv-${{ env.OPENCV_VERSION }}
          ./build-opencv4-vs2017.bat

      # install文件夹改名，并使用7z压缩
      - name: rename
        run: |
          mv opencv-${{ env.OPENCV_VERSION }}/build-v141-x64/install windows-x64
          mv opencv-${{ env.OPENCV_VERSION }}/build-v141-Win32/install windows-x86
          7z a ${{ env.PKG_NAME }}.7z windows-x64 windows-x86

      # 上传artifact
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}
          path: |
            ${{ env.PKG_NAME }}.7z

  windows-vs2019:
    runs-on: windows-2019

    env:
      OPENCV_VERSION: 4.6.0
      PKG_NAME: opencv-4.6.0-windows-vs2019

    steps:
      # 检出代码
      - uses: actions/checkout@v2

      # 检出opencv
      - name: checkout opencv
        uses: actions/checkout@v2
        with:
          repository: opencv/opencv
          path: opencv-${{ env.OPENCV_VERSION }}
          ref: ${{ env.OPENCV_VERSION }}
          submodules: recursive

      # 复制编译脚本
      - name: copy build script
        run: |
          cp build-opencv4-vs2019.bat opencv-${{ env.OPENCV_VERSION }}
          cp opencv4_cmake_options.txt opencv-${{ env.OPENCV_VERSION }}

      # 编译opencv for windows
      # https://github.com/ilammy/msvc-dev-cmd
      #- uses: ilammy/msvc-dev-cmd@v1
      - name: build opencv
        run: |
          cd opencv-${{ env.OPENCV_VERSION }}
          ./build-opencv4-vs2019.bat

      # install文件夹改名，并使用7z压缩
      - name: rename
        run: |
          mv opencv-${{ env.OPENCV_VERSION }}/build-v142-x64/install windows-x64
          mv opencv-${{ env.OPENCV_VERSION }}/build-v142-Win32/install windows-x86
          7z a ${{ env.PKG_NAME }}.7z windows-x64 windows-x86

      # 上传artifact
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}
          path: |
            ${{ env.PKG_NAME }}.7z

  release:
    needs: [ ubuntu1804, macos1015, windows-vs2017, windows-vs2019 ]

    runs-on: ubuntu-latest

    steps:
      # 检出代码
      - uses: actions/checkout@v2

      # 获取所有的git log和tag
      - name: Unshallow
        run: git fetch --prune --unshallow

      # 获取git log 从 previousTag 到 lastTag
      - name: Get git log
        id: git-log
        run: |
          previousTag=$(git describe --abbrev=0 --tags `git rev-list --tags --skip=1 --max-count=1`)
          lastTag=$(git describe --abbrev=0 --tags)
          echo "previousTag:$previousTag ~ lastTag:$lastTag"
          log=$(git log $previousTag..$lastTag --pretty=format:'- %cd %an: %s\n' --date=format:'%Y-%m-%d %H:%M:%S')
          echo "$log"
          echo "::set-output name=log::"$log""

      # 创建Changelog文件 triggered by git tag push
      - name: Generate Changelog
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo -e '${{ steps.git-log.outputs.log }}' > Release.txt

      # 下载artifact
      - name: download
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      # 查看artifact
      - name: list artifact
        run: |
          tree artifacts

      # 创建release
      - name: create-release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: Release.txt
          draft: false
          prerelease: false

      - name: upload-ubuntu1804
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_NAME: opencv-4.6.0-ubuntu1804
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PKG_NAME }}/${{ env.PKG_NAME }}.7z
          asset_name: ${{ env.PKG_NAME }}.7z
          asset_content_type: application/x-7z-compressed

      - name: upload-macos1015
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_NAME: opencv-4.6.0-macos1015
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PKG_NAME }}/${{ env.PKG_NAME }}.7z
          asset_name: ${{ env.PKG_NAME }}.7z
          asset_content_type: application/x-7z-compressed

      - name: upload-windows-vs2017
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_NAME: opencv-4.6.0-windows-vs2017
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PKG_NAME }}/${{ env.PKG_NAME }}.7z
          asset_name: ${{ env.PKG_NAME }}.7z
          asset_content_type: application/x-7z-compressed

      - name: upload-windows-vs2019
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_NAME: opencv-4.6.0-windows-vs2019
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PKG_NAME }}/${{ env.PKG_NAME }}.7z
          asset_name: ${{ env.PKG_NAME }}.7z
          asset_content_type: application/x-7z-compressed

      # 获取指定时区的时间
      # https://github.com/marketplace/actions/get-time-action
      - name: Get Time
        id: time
        uses: JantHsueh/get-time-action@master
        with:
          timeZone: 8

      # 向钉钉发送消息
      # https://github.com/marketplace/actions/web-request-action
      - name: dingtalk
        uses: satak/webrequest-action@master
        with:
          url: ${{ secrets.DINGTALK_WEBHOOK }}
          method: POST
          payload: '{"msgtype": "text", "text": {"content": "版本更新: ${{ github.repository }}-版本号: ${{ github.ref }} \n 发布时间： ${{ steps.time.outputs.time }} \n 距上个正式版的更新记录: \n${{ steps.git-log.outputs.log }}"}}'
          headers: '{"Content-Type": "application/json"}'
